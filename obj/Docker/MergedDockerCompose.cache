name: dockercompose17617019686006306313
services:
  basket.api:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: Basket.API/Dockerfile
    container_name: basket.api
    depends_on:
      basketdb:
        condition: service_started
        required: true
      rabbitmq:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      CacheSettings:ConnectionString: basketdb:6379
      EventBusMessage:HostAddress: amqp://guest:guest@rabbitmq:5672
      GrpcSettings:DiscountUrl: http://discount.grpc
    image: basketapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8001"
        protocol: tcp
  basketdb:
    container_name: basketdb
    image: redis:alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 6379
        published: "6379"
        protocol: tcp
    restart: always
  catalog.api:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: Catalog.API/Dockerfile
    container_name: catalog.api
    depends_on:
      catalogdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: mongodb://catalogdb:27017
    image: catalogapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8000"
        protocol: tcp
  catalogdb:
    container_name: catalogdb
    image: mongo
    networks:
      default: null
    ports:
      - mode: ingress
        target: 27017
        published: "27017"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: mongo_data
        target: /data/db
        volume: {}
  discount.api:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: Discount.API/Dockerfile
    container_name: discount.api
    depends_on:
      discountdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=810947;
    image: discountapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8002"
        protocol: tcp
  discount.grpc:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: Discount.Grpc/Dockerfile
    container_name: discount.grpc
    depends_on:
      discountdb:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      DatabaseSettings:ConnectionString: Server=discountdb;Port=5432;Database=DiscountDb;User Id=admin;Password=810947;
    image: discountgrpc
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8003"
        protocol: tcp
  discountdb:
    container_name: discountdb
    environment:
      POSTGRES_DB: DiscountDb
      POSTGRES_PASSWORD: "810947"
      POSTGRES_USER: admin
    image: postgres
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5432
        published: "5432"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: postgres_data
        target: /var/lib/postgresql/data
        volume: {}
  ocelotapigw:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: OcelotApiGw/Dockerfile
    container_name: ocelotapigw
    depends_on:
      basket.api:
        condition: service_started
        required: true
      catalog.api:
        condition: service_started
        required: true
      discount.api:
        condition: service_started
        required: true
      ordering.api:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
    image: ocelotapigw
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8010"
        protocol: tcp
  orderdb:
    container_name: orderdb
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD: SwN12345678
    image: mcr.microsoft.com/mssql/server:2017-latest
    networks:
      default: null
    ports:
      - mode: ingress
        target: 1433
        published: "1433"
        protocol: tcp
    restart: always
  ordering.api:
    build:
      context: D:\Work\Hermetyc\CSharpMicroservices-main\src\CSharpMicroServices
      dockerfile: Ordering.API/Dockerfile
    container_name: ordering.api
    depends_on:
      orderdb:
        condition: service_started
        required: true
      rabbitmq:
        condition: service_started
        required: true
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ConnectionStrings:OrderingConnectionString: Server=orderdb;Database=OrderDb;User Id=sa;Password=SwN12345678;
      EventBusMessage:HostAddress: amqp://guest:guest@rabbitmq:5672
    image: orderingapi
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "8004"
        protocol: tcp
  pgadmin:
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ibragimov-amir@list.ru
      PGADMIN_DEFAULT_PASSWORD: "810947"
    image: dpage/pgadmin4
    networks:
      default: null
    ports:
      - mode: ingress
        target: 80
        published: "5050"
        protocol: tcp
    restart: always
    volumes:
      - type: volume
        source: pgadmin_data
        target: /root/.pgadmin
        volume: {}
  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    networks:
      default: null
    ports:
      - mode: ingress
        target: 8000
        published: "8080"
        protocol: tcp
      - mode: ingress
        target: 9000
        published: "9000"
        protocol: tcp
    restart: always
    volumes:
      - type: bind
        source: /var/run/docker.sock
        target: /var/run/docker.sock
        bind:
          create_host_path: true
      - type: volume
        source: portainer_data
        target: /data
        volume: {}
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management-alpine
    networks:
      default: null
    ports:
      - mode: ingress
        target: 5672
        published: "5672"
        protocol: tcp
      - mode: ingress
        target: 15672
        published: "15672"
        protocol: tcp
    restart: always
networks:
  default:
    name: dockercompose17617019686006306313_default
volumes:
  mongo_data:
    name: dockercompose17617019686006306313_mongo_data
  pgadmin_data:
    name: dockercompose17617019686006306313_pgadmin_data
  portainer_data:
    name: dockercompose17617019686006306313_portainer_data
  postgres_data:
    name: dockercompose17617019686006306313_postgres_data